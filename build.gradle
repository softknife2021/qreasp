
/*
 * *
 *  * Created by softknife 2021 on 7/1/21
 *  * Copyright softknife 2021 (c) 2021 . All rights reserved.
 *  * Last modified 1/5/23 3:43 PM
 *
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'idea'
    id "com.adarshr.test-logger" version "2.1.0"
    id 'signing'
    id 'maven-publish'
    id 'maven'
    id "io.freefair.lombok" version "5.0.0-rc4"
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

repositories {
    jcenter()
    mavenCentral()
}


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

group = 'com.softknife'
description = 'Quality, Release and Automation support'
version = '0.0.1'

dependencies {
    api 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2'
    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.10'//
    implementation group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'

    //json/models
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.2.2'
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'

    //jira
    api 'io.atlassian.fugue:fugue:4.7.2'
    api 'com.atlassian.jira:jira-rest-java-client-core:5.2.1'
    api 'com.atlassian.jira:jira-rest-java-client-api:5.2.1'

    //apache
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    implementation group: 'org.apache.directory.studio', name: 'org.apache.commons.io', version: '2.4'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'

    //swagger
    implementation group: 'io.swagger', name: 'swagger-core', version: '2.0.0-rc2'
    implementation group: 'io.swagger', name: 'swagger-parser', version: '2.0.0-rc1'
    //openapi
    implementation group: 'io.swagger.core.v3', name: 'swagger-core', version: '2.1.5'
    implementation group: 'io.swagger.core.v3', name: 'swagger-models', version: '2.1.5'
    implementation group: 'io.swagger.parser.v3', name: 'swagger-parser-v3', version: '2.0.23'

    //for creating request body
    implementation group: 'io.swagger', name: 'swagger-inflector', version: '2.0.5'

    //lombok
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.12'

    //templates
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.30'
    implementation group: 'org.jtwig', name: 'jtwig-json-extension', version: '5.86.1.RELEASE'

    //mocking
    implementation group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.27.2'

    //needed for data provider
    implementation group: 'org.testng', name: 'testng', version: '7.4.0'

    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation group: 'org.testng', name: 'testng', version: '7.4.0'
}

configurations {
    childJars
}

dependencies {
    subprojects.each {
        childJars project(it.path)
    }
}

jar {
    dependsOn configurations.childJars
    from { configurations.childJars.collect { zipTree(it) } }
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//if (JavaVersion.current().isJava8Compatible()) {
//    allprojects {
//        tasks.withType(Javadoc) {
//            options.addStringOption('Xdoclint:none', '-quiet')
//        }
//    }
//}


test {
    // Use TestNG for unit tests
    useTestNG()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}


//task('sourceJar', type: Jar){
//    classifier('sources')
//    from sourceSets.main.allSource
//}
//
//task javadocJar(type: Jar) {
//    classifier('javadoc')
//    from javadoc
//}

task('sourceJar', type: Jar){
    classifier('sources')
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar) {
//    classifier('javadoc')
//    from javadoc
//}

ext.user = findProperty('sonatypeUsername')
ext.password = findProperty('sonatypePassword')

//ext.admin = hasProperty('sonatypeUsername')

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { false }
    sign publishing.publications
}

//nexusPublishing {
//    repositories {
//        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
//            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
//            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
//        }
//    }
//}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            from components.java
//            customizePom(pom, rootProject)
//
//            artifact sourcesJar
//            artifact javadocJar
//        }
//    }
//    repositories {
//        maven {
//            //url "https://s01.oss.sonatype.org/service/local/"
//            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
//            if (admin) {
//                credentials {
//                    username sonatypeUsername
//                    password sonatypePassword
//                }
//            }
//        }
//    }
//}
//
//model {
//    tasks.publish {
//        dependsOn(project.tasks.build)
//    }
//    tasks.install {
//        dependsOn(project.tasks.build)
//    }
//}
//
//def customizePom(pom, gradleProject) {
//    pom.withXml {
//        def root = asNode()
//        // modify POM and add optional flag where needed
//        root.dependencies.'*'.findAll {
//
//            ext.artifactId = it.artifactId.text()
//            ext.fulldep = it.groupId.text() + ':' + it.artifactId.text() + ':' + it.version.text()
//        }
//
//        // add all items necessary for maven central publication
//        root.children().last() + {
//            println("Name:" + gradleProject.name)
//            description gradleProject.description// moduleDescription
//            resolveStrategy = Closure.DELEGATE_FIRST
//
//            name 'Repo Qreasp'
//            description gradleProject.description
//            url 'https://github.com/softknife2021/qreasp'
//            organization {
//                name 'softknife2021'
//                url 'https://softknife2021.com'
//            }
//            issueManagement {
//                system 'GitHub'
//                url 'https://github.com/softknife2021/qreasp/issues'
//            }
//            licenses {
//                license {
//                    name 'The Apache Software License, Version 2.0'
//                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    distribution 'repo'
//                }
//            }
//            scm {
//                url 'https://github.com/softknife2021/qreasp'
//                connection 'scm:git:git://github.com/softknife2021/qreasp.git'
//                developerConnection 'scm:git:ssh://git@github.com/softknife2021/qreasp.git'
//            }
//            developers {
//                developer {
//                    id 'Alex'
//                    name 'Alexander Matsaylo'
//                    email 'softknife2021@gmail.com'
//                    timezone '+1'
//                }
//            }
//        }
//    }
//}
//
//testlogger {
//    theme 'mocha' // project level
//    slowThreshold 5000
//}
//
//task install(dependsOn: publishToMavenLocal) {
//    group = 'Publishing'
//    description = 'Installs artifacts to local Maven repository'
//}
//
////
//// RELEASE
////
//
//task release() {
//    group 'Project'
//    description 'Builds everything for the release.'
//
//    dependsOn build
//    dependsOn javadoc
//    //dependsOn jacocoTestReport
//}

publishing {
    publications{
        javaPubl(MavenPublication){
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifactId 'tools' //correct
            pom {
                name= "Alexander Matsaylo"
                description="Tools for release Managment and QA"
                url = "https://github.com/softknife2021/qreasp"
                licenses{
                    license{
                        name ="Apache license 2.0"
                        url="https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers{
                    developer{
                        name="Alexander Matsaylo"
                        email="softknife2021@gmail.com"
                    }
                }
                scm{
                    connection ="scm:git:https://github.com/softknife2021/qreasp"
                    developerConnection ="scm:git:git@github.com/softknife2021/qreasp.git"
                    url="https://github.com/softknife2021/qreasp"
                }
            }
        }
    }
}

//signing {
//    sign publishing.publications.javaPubl
//}


nexusPublishing {
    repositories {
        sonatype{
//            username=project.property("user")
//            password=project.property("password")
            username=sonatypeUsername
            password=sonatypePassword
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(
                    url: "https://oss.sonatype.org/content/repositories/releases") {
                authentication(userName: "$user", password: "$password")
            }
            snapshotRepository(
                    url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: "$user", password: "$password")
            }
        }
    }
}